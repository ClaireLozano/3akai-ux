/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery','oae.core'], function($, oae) {

    return function(uid, showSettings, widgetData) {

        // The widget container
        var $rootel = $('#' + uid);

        var authStrategyInfo = null;
        var signInRedirectUrl = null;
        var invitationInfo = null;
        var showSignUp = true;

        /**
         * Finish the login process by showing the correct validation message in case of a failed
         * login attempt, or by redirecting the user in case of a successful login attempt
         *
         * @param  {Error}      err        Error object containing error code and error message
         */
        var finishLogin = function(err) {
            if (err) {
                var signInMessage = oae.api.i18n.translate('__MSG__SIGN_IN__');
                $('#signin-local-form button', $rootel).html(signInMessage);
                $('#signin-local-form *', $rootel).prop('disable', false);

                // Set a `signin-local-failed-attempt` on the fields to tell jquery.validate
                // that the field is invalid
                $('#signin-local-username', $rootel).addClass('signin-local-failed-attempt');
                $('#signin-local-form', $rootel).valid();
                $('#signin-local-username', $rootel).removeClass('signin-local-failed-attempt');

                // Clear the password field
                $('#signin-local-password', $rootel).val('');

                // Focus into the username field
                $('#signin-local-username', $rootel).focus();
            } else {
                // If the redirect URL is the same as the current URL, we refresh the page
                if (signInRedirectUrl === window.location.pathname) {
                    window.location.reload(true);
                } else {
                    window.location = signInRedirectUrl;
                }
            }
        };

        /**
         * Attempt to log the user in with the provided username and password onto the current
         * tenant using either the LDAP login strategy or the local login strategy. If only one of
         * them is enabled, only that strategy will be attempted. If both of them are enabled, an
         * LDAP login will be attempted first. If that is unsuccessful, a local login will be
         * attempted next. This function will only be executed when form validation has passed.
         */
        var doLocalSignIn = function() {
            // Hide the login button and show a logging in message
            var signingInMessage = oae.api.i18n.translate('__MSG__SIGNING_IN__');
            $('#signin-local-form button', $rootel).html(signingInMessage);
            $('#signin-local-form *', $rootel).prop('disable', 'true');

            // Get the entered username and password
            var username = $.trim($('#signin-local-username', $rootel).val());
            var password = $.trim($('#signin-local-password', $rootel).val());

            var ldapEnabled = authStrategyInfo[oae.api.authentication.STRATEGY_LDAP];
            var localEnabled = authStrategyInfo[oae.api.authentication.STRATEGY_LOCAL];

            // Both LDAP and local are enabled. We try LDAP first, and try local next if LDAP has failed
            if (ldapEnabled && localEnabled) {
                oae.api.authentication.LDAPLogin(username, password, function(err) {
                    if (err) {
                        oae.api.authentication.localLogin(username, password, finishLogin);
                    } else {
                        finishLogin();
                    }
                });
            // Only LDAP is enabled
            } else if (ldapEnabled) {
                oae.api.authentication.LDAPLogin(username, password, finishLogin);
            // Only local authentication is enabled
            } else {
                oae.api.authentication.localLogin(username, password, finishLogin);
            }
        };

        /**
         * Bind the validation logic to the local sign in form
         */
        var validateLocalSignInForm = function() {
            var validateOpts = {
                'messages': {
                    'signin-local-username': {
                        'required': oae.api.i18n.translate('__MSG__PLEASE_ENTER_YOUR_USERNAME__'),
                        'signin-local-failed-attempt': oae.api.i18n.translate('__MSG__INVALID_USERNAME_OR_PASSWORD__')
                    },
                    'signin-local-password': oae.api.i18n.translate('__MSG__PLEASE_ENTER_YOUR_PASSWORD__')
                },
                'methods': {
                    'signin-local-failed-attempt': {
                        'method': function(value, element) {
                            // This class will be added after a failed login attempt and is used
                            // to tell jquery.validate to mark the field as invalid
                            return false;
                        }
                    }
                },
                'submitHandler': doLocalSignIn
            };

            oae.api.util.validation().validate($('#signin-local-form', $rootel), validateOpts);
        }

        /**
         * Render the sign in options (external auth options, username & password form, etc...)
         * form
         */
        var renderSignInOptions = function() {
            oae.api.util.template().render($('#signin-options-template', $rootel), {
                'authStrategyInfo': authStrategyInfo,
                'redirectUrl': signInRedirectUrl,
                'invitationInfo': invitationInfo,
                'showSignUp': showSignUp
            }, $('#signin-options-container', $rootel));

            // Handle username / password authentication
            validateLocalSignInForm();
        };

        /**
         * Render the footer for the signin modal
         */
        var renderSignInFooter = function() {
            oae.api.util.template().render($('#signin-modal-footer-template', $rootel), {
                'showSignUp': showSignUp
            }, $('#signin-modal-footer-container', $rootel));
        }

        /**
         * Initialize the signin modal
         */
        var init = function() {
            $(document).on('click', '.oae-trigger-signin', function() {
                authStrategyInfo = oae.api.authentication.getStrategyInfo();

                // Get the sign in options from the trigger element
                var signInData = $(this).data();
                signInRedirectUrl = signInData.redirecturl;
                invitationInfo = {
                    'email': signInData.email,
                    'token': signInData.token
                };

                if (signInData.hidesignup) {
                    showSignUp = false;
                }

                // Auto-signin if there is only one external signin method available
                if (authStrategyInfo.hasSingleExternalAuth) {
                    return oae.api.authentication.externalLogin(_.keys(authStrategyInfo.enabledExternalStrategies)[0], {
                        'redirectUrl': signInRedirectUrl,
                        'invitationToken': invitationInfo.token
                    });
                }

                // Show the register form and hide the Terms and Conditions
                renderSignInOptions();
                renderSignInFooter();

                // Trigger the modal dialog
                $('#signin-modal', $rootel).modal({
                    'backdrop': 'static'
                });
            });
        };

        init();
    };
});
